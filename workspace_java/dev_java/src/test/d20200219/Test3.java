package test.d20200219;
/*
3.	다음 요구사항을 만족하는 은행 계좌 클래스를 정의하여 소스코드와 결과화면 
	스크린 샷을 제출하시오
 	[요구사항]
 	가. 속성으로 예금주,계좌번호(하이픈 때문에 String),잔액을 갖는다.
    	예금주는 String,계좌번호 String,잔액은 int로 정의하여라
 	나. 메소드로 인출 및 입금 메소드를 갖는다.
     	인출 메소드는 인자로 인출할 금액을 받고 잔액이 부족시에는
     	“잔액이 부족합니다”라는 메시지를 잔액이 충분할때는 인출한 금액을 출력하는 
     	메소드이다
     	입금 메소드는 인자로 입금할 금액을 받고 입금액을 잔액에 더하고
     	입금한 금액을 출력하는 메소드이다
 	다. toString()메소드를 오버라이딩하여 계좌정보 즉 얘금주,계좌번호,잔액(고유명사=>전역변수)을
    	출력하는 메소드를 정의하여라
    	예]예금주:자바맨,계좌번호:123-456,잔액:1000원
*/
public class Test3 extends Object{		//extends Object => Override할 때 필요함**
	//고유명사 => 전역변수 선언한다.가급적이면 변수를 가장 위에 둔다.
	//생성자를 생각해야 한다.필요가 없더라도 쓰는 습관을 들이자.생성자 친해지자**
	//인출메소드, 입금메소드를 만든다.
	//메인메소드는 여기 없어도 된다.(고수가 아니다)
	
	//변수선언-고유명사-그 이름으로 클래스가 연상되는 그런 정보들-전역변수이다.
	
	//디폴트생성자(무조건 쓴다)
	
	//메소드 선언-리턴타입과 파라미터
	//DB연동하기-select문과 insert,update,delete문(쿼리문) 먼저 작성해 보기.
	//위 쿼리문 안에는 ?가 있다-사용자가 입력하는 값을 넣어 줄 곳이다.
	//?표가 파라미터가 된다.
	//처리 결과를 사용자에게 응답해야 한다.리턴타입, 리턴값
	
	//toString()어떤 클래스나 가질 수 있는 메소드
	//오버라이딩-아빠가 가진 기능을 재정의하였다.기능을 확장시키거나 새로운 속성을 부여한다.
	
	
	/* 원래는 부모가 가진 메소드이므로 별도로 정의하지 않아도 호출할 수 있다.
	 * 그러나 추가로 작성하고 싶은 내용이 있다면 언제든지 재정의할 수 있다 => toString()
	 * 재정의 할 때 반환값을 문자열로 바꾸었으므로 주소번지 대신 나는 Test3클래스입니다.를 출력하게 된다.
	 * toString()는 설계한 클래스의 기본 정보를 출력할 때 많이 활용된다.
	 * 또한 UI/UX 화면단을 구현해 주는 외부 클래스에도 적용할 수 있다.
	 */
	@Override
	public String toString() {	//아빠가 가진 기능을 재정의했다.
		return "나는 Test3 클래스입니다.";
	}
}